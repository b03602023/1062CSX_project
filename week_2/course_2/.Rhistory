res
RES
url <- "http://ecshweb.pchome.com.tw/search/v3.3/all/results?q=sony&page=1&sort=rnk/dc"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$prods)
View(data.frame(do.call(rbind,res_json$prods)))
url="https://ecshweb.pchome.com.tw/search/v3.3/all/categories?q=sony"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$prods)
View(data.frame(do.call(rbind,res_json$prods)))
res
res_json
res_json$prods
View(res_json)
getURL?
?
)
?getURL
urlPath
temp
temp
res
# Download a URI {RCurl}
# 獲得網頁的原始碼
temp    <- getURL(urlPath, encoding = "big5")
temp
res_json
res
RES
### function SayHello #####################################################
SayHello <- function (name) {
print(name)
}
SayHello("Pecu") # Output > "Hello, Pecu"
### function GetBmi #######################################################
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m) ^ 2
# Return my.bmi
return (my.bmi)
}
GetBmi(180, 55)
### function CheckBmiLevel ################################################
CheckBmiLevel <- function (my.height.cm, my.weight.kg) {
# Call the GetBmi function we just made
my.bmi <- GetBmi(my.height.cm, my.weight.kg)
if (my.bmi >= 35) {
return(paste("Your bmi: ", my.bmi, ", 重度肥胖!"))
} else if (my.bmi >= 30) {
return(paste("Your bmi: ", my.bmi, ", 中度肥胖!"))
} else if (my.bmi >= 27) {
return(paste("Your bmi: ", my.bmi, ", 輕度肥胖!"))
} else if (my.bmi >= 24) {
return(paste("Your bmi: ", my.bmi, ", 過重!"))
} else if (my.bmi >= 18.5) {
return(paste("Your bmi: ", my.bmi, ", 正常範圍"))
} else {
return(paste("Your bmi: ", my.bmi, ", 過輕!"))
}
}
bmi.level.msg <- CheckBmiLevel(176, 70)
bmi.level.msg
my.bmi
ls()
x=190
paste("x",x)
paste("x:",x)
cat("x:"x)
cat("x:",x)
print("x: %d%",x)
print(sprinf(("x: %d%",x))
sprinf(("x: %d%",x)
?sprintf
sprinf(("x: %d",x)
sprinf(("x: %f",x)
sprinf("x: %f",x)
print(sprintf("x: %f",x))
print(sprintf("x: %d",x))
sprintf("x: %d",x)
paste("x:",x)
### function GetLargest ###################################################
GetLargest <- function (vector) {
print(paste("The Largest Number is :", max(vector)))
}
vec_1 <- c(1, 5, 10, 200, 2000, 121)
GetLargest(vec_1)
### practice_2_answer
### course_grade
# Create a vector called course.students.number, with data: c(1, 30)
course.student.number <- c(1:30)
# Create a variable csn, with data: length of course.student.number
csn <- length(course.student.number)
# Create a vector course.student.grade, with sample() function: x = c(55:100), size = csn
course.student.grade <- sample(x = c(55:100), size = csn)
# Assign course.student.number as names of the course.student.grade
names(course.student.grade) <- course.student.number
# Create csg.mean, with the mean value of course.student.grade
csg.mean <- mean(course.student.grade)
# Create csg.max with the max value of course.student.grade
csg.max <- max(course.student.grade)
# Create csg.min with the min value of course.student.grade
csg.min <- min(course.student.grade)
# Create a vector csg.over.80, with the logical result of course.student.grade over 80
csg.over.80 <- course.student.grade >= 80
# Check csg.over.mean
csg.over.80
# Filter the course.student.grade with csg.over.mean
course.student.grade[csg.over.80]
# Print course information
print(paste("全班人數:", csn))
print(paste("全班平均：", csg.mean))
print(paste("全班最高：", csg.max))
print(paste("全班最低：", csg.min))
# Print over 80 details
print(paste("高於80分總人數：", length(course.student.grade[csg.over.80])))
print(paste("高於80分座號：", names(course.student.grade[csg.over.80])))
### practice_2_answer
### dataframe practice - II
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
my.height.m <- my.height.cm / 100
my.bmi <- my.weight.kg / (my.height.m) ^ 2
return (my.bmi)
}
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
### practice_2_answer
### dataframe practice - II
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
my.height.m <- my.height.cm / 100
my.bmi <- my.weight.kg / (my.height.m) ^ 2
return (my.bmi)
}
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
setwd("D:/D disk/unicourse/106shia/github/1062CSX_project/week_2/course_2")
### practice_2_answer
### dataframe practice - II
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg) {
my.height.m <- my.height.cm / 100
my.bmi <- my.weight.kg / (my.height.m) ^ 2
return (my.bmi)
}
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
df
# 使用dim()查看df的維度(列數與欄數)
dim(df)
# 使用head()查看df前6筆資料
head(df)
# 使用tail()查看df後6筆資料
tail(df)
# 使用summary()查看df的描述性統計
summary(df)
# 使用str()查看df的詳細資訊
str(df)
# 將df$School與df$Sex轉為factor型態
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$Sex)
### Part II - 資料框整理技巧I #######################################################
# 請注意vector特性：
# 向量物件只能接受一種類別，若給定多種類別會依[字串>數值>布林]進行自動轉換
# 這使得kobe資料內的型態都被轉存為chr了
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
class(Konbe)
class(Kobe)
class(Weight)
class(Height)
# 使用cbind()，新增Height與Weight至df為欄(column)資料
df <- cbind(df, Height, Weight)
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
# 重新使用str()檢查一次df的結構時...
# Age, Grade, Height, Weight都變成chr型態了?? <- 被kobe資料
str(df)
tail(df)
# kobe的Grade資料出現了NA值，請將其重新設定為990分。
df$Grade[11] <- 990
# 轉換df欄位的資料型態
df$Grade <- as.integer(df$Grade)
df$Age <- as.numeric(df$Age)
df$Height <- as.numeric(df$Height)
df$Weight <- as.numeric(df$Weight)
str(df)
# 使用order()，以df$Grade將df遞減排序
df <- df[order(df$Grade, decreasing = T), ]
# 使用subset()，刪除df$Age欄位(這也是一種方式df$Age <- NULL)
df <- subset(df, select = c(-Age))
df$Grade
# 使用names()，重新將Grade欄位命名為ToeicGrade
names(df)[4] <- "ToeicGrade"
# 使用subset()，篩選出ToeicGrade大於900並且身高大於170的人
# 且欄位只需要Name, ToeicGrade與Height
subset(df, Height > 170 & ToeicGrade > 900, select = c(Name, ToeicGrade, Height))
# 不使用subset()，篩選出df中School A的人。
df[df$School == 'A', ]
df
### Part III - 資料框整理技巧II #####################################################
df.sport <- data.frame(Name = c("Ali", "Petty", "Kobe"), FavSport = c("basketball", "baseball", "baseketball"))
df.sport
df$ToeicLevel <- cut(x = df$ToeicGrade,
breaks = c(0, 600, 700, 800, 900, Inf),
labels = c("E", "D", "C", "B", "A"))
df$ToeicLevel
df$ToeicGrade
head(df)
?cut
?mapply
# 使用mapply()進行bmi計算[調用GetBmi()，參數分別為df$Height, df$Weight]，回傳結果新增至df$Bmi欄位
# 參考http://blog.fens.me/r-apply/
df$Bmi <- mapply(GetBmi, df$Height, df$Weight)
df$Bmi
GetBmi
df
df.sport
# 使用merge()，將df.sport資料與df進行連結後更新至df，並設定all.x = T保留所有資料
# 參考https://joe11051105.gitbooks.io/r_basic/content/arrange_data/merge_and_subsetting.html
df <- merge(df, df.sport, by = 'Name', all.x = T)
View(df)
# 使用merge()，將df.sport資料與df進行連結後更新至df，並設定all.x = T保留所有資料
# 參考https://joe11051105.gitbooks.io/r_basic/content/arrange_data/merge_and_subsetting.html
df <- merge(df, df.sport, by = 'Name', all = T)
View(df)
matrix(1:12,nrow=3,ncol=4)
matrix(1:12,nrow=3,ncol=4,byrow=T)
matrix(1:12,nrow=3,ncol=4,byrow=T)
m=matrix(1:12,nrow=3,ncol=4,byrow=T)
apply(m,1,sum)
### Crawler_Example with rvest    #####################################################################
# 參考：https://blog.gtwang.org/r/rvest-web-scraping-with-r/
rm(list = ls())
library(rvest)
install.packages("rvest")
?sum
m
m=matrix(1:12,nrow=3,ncol=4,byrow=T)
m
sum(m,1)
sum(m[,1],1)
sum(m[,1],2)
sum(1,2,3,4,5)
install.packages("tidyverse")
install.packages("tmcn")
# in class practice
library(tmcn)
url="http://www.ipeen.com.tw/taiwan/rank/F_0_0_1_0_0/?"
html=read_html(url)
# in class practice
library(tmcn)
?html_nodes
library(rvest)
url="http://www.ipeen.com.tw/taiwan/rank/F_0_0_1_0_0/?"
html=read_html(url)
title=html_nodes(html,"a")
title
href=html_attr(title,"href")
data=data.frame(title=toUTF8(html_text(title)),href=href)
data
View(data)
html=read_html(url)
title=html_nodes(.sname)
html=read_html(url)
title=html_nodes(".sname")
?html_nodes
title=html_node(".sname")
title=html_node(url,".sname")
title=html_node(.sname)
title=html_node(".sname")
url="http://www.ipeen.com.tw/taiwan/rank/F_0_0_1_0_0/?"
html=read_html(url)
title=html_node(".sname")
title=html_node(url,".sname")
title=html_node(html,".sname")
title
View(title)
View(html)
url="https://movies.yahoo.com.tw/chart.html?cate=rating"
# 訪問網站
html=read_html(url)
title=html_node(html,".rank_txt")
View(title)
View(html)
url="https://movies.yahoo.com.tw/chart.html?cate=rating"
# 訪問網站
html=read_html(url)
title=html_node(html,".rank_txt")
View(title)
# in class practice
library(tmcn)
library(rvest)
url="https://movies.yahoo.com.tw/chart.html?cate=rating"
# 訪問網站
html=read_html(url)
title=html_node(html,".rank_txt")
View(html)
View(title)
library(tmcn)
library(rvest)
url="https://movies.yahoo.com.tw/chart.html?cate=rating"
# 訪問網站
html=read_html(url)
title=html_node(html,".rank_txt")
View(title)
View(html)
url="https://movies.yahoo.com.tw/chart.html?cate=rating"
# 訪問網站
html=read_html(url)
title=html_node(html,".rank_txt")
data=data.frame(title=toUTF8(html_text(title)))
View(data)
View(html)
View(title)
title=html_node(html,".rank_txt")
View(title)
# in class practice
library(tmcn)
library(rvest)
url="https://movies.yahoo.com.tw/chart.html?cate=rating"
# 訪問網站
html=read_html(url)
View(html)
View(html)
View(html)
View(html)
title=html_node(html,".td")
title
View(html)
View(title)
title=html_node(x = html, css = ".td")
View(title)
title=html_node(x = html, xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "td", " " ))]')
View(title)
title=html_node(x = html, xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "rank_txt", " " ))]')
View(title)
View(title)
title=html_node(x = html, css = "div.rank_text")
title=html_node(x = html, css = "div.rank_txt")
View(title)
data=data.frame(title=toUTF8(html_text(title)))
title=html_nodes(x = html, css = "div.rank_txt")
View(title)
View(title)
View(title)
data=data.frame(title=toUTF8(html_text(title)))
data
View(title)
?html_attr
title = html_nodes(x = html, css = ".rank_txt")
ref = html_attrs(x = html, ref = "href" )
title
ref = html_attrs(x = html, "href" )
ref = html_attrs( html, "href" )
?html_attr
toUTF8(html_text(title))
data=data.frame(title=toUTF8(html_text(title)))
View(data)
htitle = html_nodes(x = html, css = "a")
View(htitle)
ref = html_attrs( htitle, "href" )
ref = html_attr( htitle, "href" )
?html_attr
head(html)
ref
title = html_nodes(x = html, css = ".rank_txt")
View(title)
title
title = html_nodes(x = html, css = ".td")
title
htitle = html_nodes(x = title, css = "a")
View(htitle)
htitle
title = html_nodes(x = html, css = ".rank_txt")
htitle = html_nodes(x = html, css = "a")
title = html_nodes(x = html, css = ".td")
htitle = html_nodes(x = title, css = "a")
ref = html_attr( htitle, "href" )
data=data.frame(title=toUTF8(html_text(title)), ref = ref)
htitle = html_nodes(x = html, css = "a")
ref = html_attr( htitle, "href" )
data=data.frame(title=toUTF8(html_text(title)), ref = ref)
html=read_html(url)
title = html_nodes(x = html, css = ".rank_txt")
htitle = html_nodes(x = html, css = "a")
ref = html_attr( htitle, "href" )
data=data.frame(title=toUTF8(html_text(title)), ref = ref)
# in class practice
library(tmcn)
library(rvest)
url="https://movies.yahoo.com.tw/chart.html?cate=rating"
# 訪問網站
html=read_html(url)
title = html_nodes(x = html, css = ".rank_txt")
htitle = html_nodes(x = html, css = "a")
ref = html_attr( htitle, "href" )
# in class practice
library(tmcn)
library(rvest)
url="https://movies.yahoo.com.tw/chart.html?cate=rating"
# 訪問網站
html=read_html(url)
title = html_nodes(x = html, css = ".rank_txt")
htitle = html_nodes(x = html, css = ".td a")
ref = html_attr( html, "href" )
data=data.frame(title=toUTF8(html_text(title)), ref = ref)
View(data)
ref
htitle
length(htitle)
View(htitle)
html_text(x = title)
toUTF8(html_text(title)
)
title
table.title = html_nodes(x = html, css = ".tr top")
html_text(table.title)
table.title
# in class practice
library(tmcn)
library(rvest)
url="https://movies.yahoo.com.tw/chart.html?cate=rating"
# 訪問網站
html=read_html(url)
title=html_nodes(x = html, css = "div.rank_txt")
data=data.frame(title=toUTF8(html_text(title)))
data
title=html_nodes(x = html, css = ".rank_txt")
data=data.frame(title=toUTF8(html_text(title)))
title = html_nodes(x = html, css = ".rank_txt")
url="https://movies.yahoo.com.tw/chart.html?cate=rating"
# 訪問網站
html=read_html(url)
title = html_nodes(x = html, css = ".rank_txt")
htitle = html_nodes(x = html, css = ".td a")
table.title = html_nodes(x = html, css = ".tr top")
View(table.title)
data=data.frame(title=toUTF8(html_text(title)), ref = ref)
htitle = html_nodes(x = html, css = ".tr .td a")
View(htitle)
htitle = html_nodes(x = html, css = ".tr, .td a")
htitle = html_nodes(x = html, css = ".td a")
View(htitle)
xml_attrs(htitle[[8]])
xml_attrs(htitle[[1]])
xml_attrs(htitle[[1]])[["href"]]
xml_attrs(htitle[[2]])
ref = html_attr( htitle, "href" )
ref
htitle = html_nodes(x = html, css = ".td a")
htitle
View(htitle)
htitle = html_node(x = html, css = ".td a")
ref = html_attr( htitle, "href" )
ref
htiml=read_html("https://www.imdb.com/chart/boxoffice?ref_=nv_ch_cht_1")
title = html_nodes(x = html, css = ".titleColumn a")
# in class practice
library(rvest)
htiml=read_html("https://www.imdb.com/chart/boxoffice?ref_=nv_ch_cht_1")
html=read_html("https://www.imdb.com/chart/boxoffice?ref_=nv_ch_cht_1")
title = html_nodes(x = html, css = ".titleColumn a")
html_text(x = title)
weekend = html_nodes(x = html, css = ".titleColumn+ .ratingColumn")
View(weekend)
weekend
weekend = html_text(x = weekend)
weekend
as.factor(weekend)
as.integer(weekend)
weekend = html_nodes(x = html, css = ".secondaryInfo")
weekend = html_text(x = weekend)
weekend
gross = html_nodes(x = html, css = ".secondaryInfo")
gross = html_text(x = gross)
gross
# in class practice
library(rvest)
html=read_html("https://www.imdb.com/chart/boxoffice?ref_=nv_ch_cht_1")
title = html_nodes(x = html, css = ".titleColumn a")
title = html_text(x = title)
gross = html_nodes(x = html, css = ".secondaryInfo")
gross = html_text(x = gross)
data=data.frame(title = title, gross = gross)
data
htitle = html_nodes(x = html, css = ".titleColumn a")
ref = html_attr(htitle,"href")
htitle
View(htitle)
data=data.frame(title = title, gross = gross, link = ref)
data
View(data)
View(htitle)
ref
?kable
# ggplot2 呈現圖表
library(ggplot2)
ggplot(data)
g = ggplot(data)
g + geom_bar(stat="identity")
