t_data <- data
t_data <- apply(t_data, MARGIN = 2, FUN = as.character)
t_data <- apply(t_data, 2, as.numeric)
t_data <- data.frame(matrix(t_data, nrow = nrow(data)))
View(t_data)
names(t_data) <- names(data)
for(i in 1:ncol(data)){
if(sum(is.na(t_data[,i]))==nrow(t_data)){
#names(t_data) <- names(t_data)[-i]
t_data <- t_data[,-i]}
}
t_data <- t_data[,-1]
View(t_data)
#PCA
pca_data <- prcomp(t_data, scale = TRUE)
t_data <- t_data[complete.cases(t_data),]
#PCA
pca_data <- prcomp(t_data, scale = TRUE)
stdev_data <- summary(pca_data)$importance[2,]
data <- data[, which(stdev_data >= .04)]
View(data)
t_data <- data
t_data <- apply(t_data, MARGIN = 2, FUN = as.character)
t_data <- apply(t_data, 2, as.numeric)
t_data <- data.frame(matrix(t_data, nrow = nrow(data)))
names(t_data) <- names(data)
#delete the NAs column
for(i in 1:ncol(data)){
if(sum(is.na(t_data[,i]))==nrow(t_data)){
#names(t_data) <- names(t_data)[-i]
t_data <- t_data[,-i]}
}
t_data <- t_data[,-1]
time <- time_count(start, end)
data <- parse(time, prefex)
#利用主成分抽取有用資訊
#Performing Variable Selection 主成分分析: 減少數據集的維數，保留對變異數貢獻最大的特徵
#change the variable type
t_data <- data
t_data <- apply(t_data, MARGIN = 2, FUN = as.character)
t_data <- apply(t_data, 2, as.numeric)
t_data <- data.frame(matrix(t_data, nrow = nrow(data)))
names(t_data) <- names(data)
#delete the NAs column
for(i in 1:ncol(data)){
if(sum(is.na(t_data[,i]))==nrow(t_data)){
#names(t_data) <- names(t_data)[-i]
t_data <- t_data[,-i]}
}
t_data <- t_data[,-1]
t_data <- t_data[complete.cases(t_data),]
#PCA
pca_data <- prcomp(t_data, scale = TRUE)
stdev_data <- summary(pca_data)$importance[2,]
t_data <- t_data[, which(stdev_data >= .04)]
View(t_data)
View(data)
# plot the graph
library(ggplot2)
ggplot(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,2])) + geom_line() +
xlab("time") + ylab("temperature(degree C)")
View(t_data)
ggplot(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,5])) + geom_line() +
xlab("time") + ylab("temperature(degree C)")
ggplot(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,1])) + geom_line() +
geom_line(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,2]), color="red") +
geom_line(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,3]), color="blue") +
xlab("time") + ylab("temperature(degree C)")
ggplot(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,1])) + geom_line() +
geom_line(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,3]), color="red") +
geom_line(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,4]), color="blue") +
xlab("time") + ylab("temperature(degree C)")
ggplot(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,1])) + geom_line() +
geom_line(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,3]), color="red") +
geom_line(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,4]), color="blue") +
xlab("time") + ylab("atmospheric pressure")
# 總共有八年的資料
# 將前四年(4)作為訓練資料，中間三年(3)作為validation，再將作後一年(1)作為test data
n*4
n=365       # daily data -> view it in year scale
# 總共有八年的資料
# 將前四年(4)作為訓練資料，中間三年(3)作為validation，再將作後一年(1)作為test data
n*4
n*4+
n*3+
n*1
n*3
?prediction
library(nnet)
prediction <- predict(nnetM, t_data)
View(data)
names(data)
#change the variable type
t_data <- data
t_data <- apply(t_data, MARGIN = 2, FUN = as.character)
t_data <- apply(t_data, 2, as.numeric)
t_data <- data.frame(matrix(t_data, nrow = nrow(data)))
names(t_data) <- names(data)
#delete the NAs column
for(i in 1:ncol(data)){
if(sum(is.na(t_data[,i]))==nrow(t_data)){
#names(t_data) <- names(t_data)[-i]
t_data <- t_data[,-i]}
}
t_data <- t_data[,-1]
append(data[22],t_data)
t_data <- append(data[22],t_data)
#change the variable type
t_data <- data
t_data <- apply(t_data, MARGIN = 2, FUN = as.character)
t_data <- apply(t_data, 2, as.numeric)
t_data <- data.frame(matrix(t_data, nrow = nrow(data)))
names(t_data) <- names(data)
#delete the NAs column
for(i in 1:ncol(data)){
if(sum(is.na(t_data[,i]))==nrow(t_data)){
#names(t_data) <- names(t_data)[-i]
t_data <- t_data[,-i]}
}
t_data <- t_data[,-1]
t_data <- cbind(data[22],t_data)
View(t_data)
#利用主成分抽取有用資訊
#Performing Variable Selection 主成分分析: 減少數據集的維數，保留對變異數貢獻最大的特徵
#change the variable type
t_data <- data
t_data <- apply(t_data, MARGIN = 2, FUN = as.character)
t_data <- apply(t_data, 2, as.numeric)
t_data <- data.frame(matrix(t_data, nrow = nrow(data)))
names(t_data) <- names(data)
#delete the NAs column
for(i in 1:ncol(data)){
if(sum(is.na(t_data[,i]))==nrow(t_data)){
#names(t_data) <- names(t_data)[-i]
t_data <- t_data[,-i]}
}
t_data <- t_data[,-1]
t_data <- t_data[complete.cases(t_data),]
#PCA
pca_data <- prcomp(t_data, scale = TRUE)
stdev_data <- summary(pca_data)$importance[2,]
t_data <- t_data[, which(stdev_data >= .04)]
t_data <- data
t_data <- apply(t_data, MARGIN = 2, FUN = as.character)
t_data <- apply(t_data, 2, as.numeric)
t_data <- data.frame(matrix(t_data, nrow = nrow(data)))
names(t_data) <- names(data)
#delete the NAs column
for(i in 1:ncol(data)){
if(sum(is.na(t_data[,i]))==nrow(t_data)){
#names(t_data) <- names(t_data)[-i]
t_data <- t_data[,-i]}
}
t_data <- t_data[,-1]
t_data <- t_data[complete.cases(t_data),]
names(t_data)
pca_data <- prcomp(t_data, scale = TRUE)
stdev_data <- summary(pca_data)$importance[2,]
tp_data <- t_data[, which(stdev_data >= .04)]
t_data <- cbind(t_data[,15],tp_data)
View(t_data)
names(t_data[,15])
names(t_data)[15]
t_data <- data
t_data <- apply(t_data, MARGIN = 2, FUN = as.character)
t_data <- apply(t_data, 2, as.numeric)
t_data <- data.frame(matrix(t_data, nrow = nrow(data)))
names(t_data) <- names(data)
#delete the NAs column
for(i in 1:ncol(data)){
if(sum(is.na(t_data[,i]))==nrow(t_data)){
#names(t_data) <- names(t_data)[-i]
t_data <- t_data[,-i]}
}
t_data <- t_data[,-1]
t_data <- t_data[complete.cases(t_data),]
names(t_data)
names(t_data)[15]
#PCA
pca_data <- prcomp(t_data, scale = TRUE)
stdev_data <- summary(pca_data)$importance[2,]
tp_data <- t_data[, which(stdev_data >= .04)]
tp_data <- cbind(t_data[,15],tp_data)
View(tp_data)
names(tp_data)[1] <- names(t_data)[15]
View(tp_data)
View(tp_data)
names(tp_data) <- c("rain","pressure","SLP","MaxP","MinP","T")
# 總共有八年的資料
# 將1-1300作為訓練資料，1300-2000作為validation，2000-2300作為test data
nnetM <- nnet(formula = rain ~ ., linout = T, size = 3, decay = 0.001, maxit = 1000, trace = T, data = tp_data)
prediction <- predict(nnetM, tp_data)
View(prediction)
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,1])) + geom_line() +
xlab("time") + ylab("rainfall(mm)")
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,1])) + geom_line() +
xlab("time") + ylab("rainfall(mm)") +
geom_line(data = prediction, aes(x = 1:nrow(tp_data), y = prediction), color = "red")
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,1])) + geom_line() +
xlab("time") + ylab("rainfall(mm)") +
geom_line(data = tp_data, aes(x = 1:nrow(tp_data), y = prediction), color = "red")
prediction
vector(prediction)
as.vector(prediction)
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,1])) + geom_line() +
xlab("time") + ylab("rainfall(mm)") +
geom_line(data = tp_data, aes(x = 1:nrow(tp_data), y = as.vector(prediction)), color = "red")
# normalization
apply(X = tp_data, MARGIN = 1, FUN = mean)
# normalization
apply(X = tp_data, MARGIN = 2, FUN = mean)
# normalization
tp_mean <- apply(X = tp_data, MARGIN = 2, FUN = mean)
tp_sd <- apply(X = tp_data, MARGIN = 2, FUN = sd)
tp_sd
scale(x = tp_data, center = tp_mean, scale = tp_sd)
tp_data <- scale(x = tp_data, center = tp_mean, scale = tp_sd)
View(tp_data)
apply(X = tp_data, MARGIN = 2, FUN = mean)
apply(X = tp_data, MARGIN = 2, FUN = sd)
# 總共有八年的資料
# 將1-1300作為訓練資料，1300-2000作為validation，2000-2300作為test data
nnetM <- nnet(formula = rain ~ ., linout = T, size = 3, decay = 0.001, maxit = 1000, trace = T, data = tp_data)
prediction <- predict(nnetM, tp_data)
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,1])) + geom_line() +
xlab("time") + ylab("rainfall(mm)") +
geom_line(data = tp_data, aes(x = 1:nrow(tp_data), y = as.vector(prediction)), color = "red")
View(prediction)
prediction*tp_sd[1]+tp_mean[1]
prediction <- prediction*tp_sd[1]+tp_mean[1]
View(prediction)
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,1])) + geom_line() +
xlab("time") + ylab("rainfall(mm)") +
geom_line(data = tp_data, aes(x = 1:nrow(tp_data), y = as.vector(prediction)), color = "red")
mode(tp_data)
class(tp_data)
tp_data <- data.frame(tp_data)
# 總共有八年的資料
# 將1-1300作為訓練資料，1300-2000作為validation，2000-2300作為test data
nnetM <- nnet(formula = rain ~ ., linout = T, size = 3, decay = 0.001, maxit = 1000, trace = T, data = tp_data)
prediction <- predict(nnetM, tp_data)
prediction <- prediction*tp_sd[1]+tp_mean[1]
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,1])) + geom_line() +
xlab("time") + ylab("rainfall(mm)") +
geom_line(data = tp_data, aes(x = 1:nrow(tp_data), y = as.vector(prediction)), color = "red")
ggplot(data = tp_data, aes(x = 1:n, y = tp_data[1:n,1])) + geom_line() +
xlab("time") + ylab("rainfall(mm)") +
geom_line(data = tp_data, aes(x = 1:n, y = as.vector(prediction)[1:n]), color = "red")
n
ggplot(data = tp_data[1:n,], aes(x = 1:n, y = tp_data[1:n,1])) + geom_line() +
xlab("time") + ylab("rainfall(mm)") +
geom_line(data = tp_data[1:n,], aes(x = 1:n, y = as.vector(prediction)[1:n]), color = "red")
tp_mean
tp_sd
summary(netM)
summary(nnetM)
plot(nnetM)
#An Introduction To Deep Learning
#Chapter 4 Code Examples
#Clear the workspace
rm(list = ls())
#Loading the required packages
require(monmlp)
require(Metrics)
#MultiLayer Perceptron Code
x <- as.matrix(seq(-10, 10, length = 100))
y <- logistic(x) + rnorm(100, sd = 0.2)
#monmlp::logistic
#Computes the logistic sigmoid function.
#Used as a hidden layer transfer function for nonlinear MLP or MONMLP models.
#
#Plotting Data
plot(x, y)
lines(x, logistic(x), lwd = 10, col = "gray")
#Fitting Model
mlpModel <- monmlp.fit(x = x, y = y, hidden1 = 3, monotone = 1,
n.ensemble = 15, bag = TRUE)
#number of ensemble members to fit.
mlpModel <- monmlp.predict(x = x, weights = mlpModel)
#Plotting predicted value over actual values
for(i in 1:15){
lines(x, attr(mlpModel, "ensemble")[[i]], col = "red")
}
#載入套件
library(neuralnet)
#整理資料
data <- iris
data$setosa <- ifelse(data$Species == "setosa", 1, 0)
data$versicolor <- ifelse(data$Species == "versicolor", 1, 0)
data$virginica <- ifelse(data$Species == "virginica", 1, 0)
# Conditional Element Selection
# ifelse(test, yes, no)
# ifelse returns a value with the same shape as test which is filled with elements selected from either yes or no
# depending on whether the element of test is TRUE or FALSE.
#訓練模型
f1 <- as.formula('setosa + versicolor + virginica  ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01,linear.output = F)
print(bpn)
#圖解BP
plot(bpn)
#-----parse the observation data from Weather Bureau----
# 蒐集氣象局資料
# http://e-service.cwb.gov.tw/HistoryDataQuery/index.jsp
library(rvest)
library(magrittr)
start="2010-08"  #蒐集資料的起始日期yyyy-mm
end="2017-08"    #蒐集資料的結束日期yyyy-mm
# 不同的測站會有不同的prefex
prefex <- "http://e-service.cwb.gov.tw/HistoryDataQuery/MonthDataController.do?command=viewMain&station=466920&stname=%25E8%2587%25BA%25E5%258C%2597&datepicker="
time_count=function(start,end){
start_yr = as.numeric(substr(start, 1, 4))
end_yr = as.numeric(substr(end, 1, 4))
start_m = as.numeric(substr(start, 6, 7))
end_m = as.numeric(substr(end, 6, 7))
m = 1:12
yr = start_yr:end_yr
#yr_temp = mapply(rep,yr[2:(length(yr)-1)],length(m))
#t_temp = paste0(yr_temp,"-",m)
t_temp = numeric()
if(length(yr)!=1 && length(yr)!=2){
t_temp = mapply(rep,yr[2:(length(yr)-1)],length(m)) %>%
paste0(.,"-",m)
}
#start_yr_temp = mapply(rep,start_yr,length(start_m:12))
#start_t_temp = paste0(start_yr_temp,"-",start_m:12)
start_t_temp = mapply(rep,start_yr,length(start_m:12)) %>%
paste0(.,"-",start_m:12)
#end_yr_temp = mapply(rep,end_yr,length(1:end_m))
#end_t_temp = paste0(end_yr_temp,"-",1:end_m)
end_t_temp = mapply(rep,end_yr,length(1:end_m)) %>%
paste0(.,"-",1:end_m)
t = c(start_t_temp,t_temp,end_t_temp)
for(i in 1:length(t)){
if(substr(t[i],7,7)==""){
t[i] = paste0(substr(t[i],1,5),"0",substr(t[i],6,6))
}
}
return(t)
}
parse <- function(time,prefex){
url <- paste0(prefex,time)
temp_data <- data.frame()
for(i in 1:length(url)){
res <- read_html(url[i])
title <- html_text(html_nodes(res,"tr.second_tr"))
vv <- html_nodes(x = res, css = "table#MyTable tbody tr td") %>%
html_text(.)
# 清洗資料
value <- gsub('\u00a0','',vv) %>% matrix(.,ncol = 32, byrow = T)
temp_data  <- data.frame(value)
title <- strsplit(title,split="\r\n\t\t", fixed=T) %>% unlist(.)
title[length(title)] <- gsub("\t\t\r\n\t", replacement = "", title[length(title)])
colnames(temp_data) <- title  # 加上每個欄位的名稱
if(i == 1){data <- temp_data
}else{
data=rbind(data,temp_data)
}
}
return(data)
}
time <- time_count(start, end)
data <- parse(time, prefex)
#利用主成分抽取有用資訊
#Performing Variable Selection 主成分分析: 減少數據集的維數，保留對變異數貢獻最大的特徵
#change the variable type
t_data <- data
t_data <- apply(t_data, MARGIN = 2, FUN = as.character)
t_data <- apply(t_data, 2, as.numeric)
t_data <- data.frame(matrix(t_data, nrow = nrow(data)))
names(t_data) <- names(data)
#delete the NAs column
for(i in 1:ncol(data)){
if(sum(is.na(t_data[,i]))==nrow(t_data)){
#names(t_data) <- names(t_data)[-i]
t_data <- t_data[,-i]}
}
t_data <- t_data[,-1]
t_data <- t_data[complete.cases(t_data),]
#PCA
pca_data <- prcomp(t_data, scale = TRUE)
stdev_data <- summary(pca_data)$importance[2,]
tp_data <- t_data[, which(stdev_data >= .04)]
tp_data <- cbind(t_data[,15],tp_data)
names(tp_data)[1] <- names(t_data)[15]
View(tp_data)
names(tp_data) <- c("rain","pressure","SLP","MaxP","MinP","T")
# plot the graph
library(ggplot2)
ggplot(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,5])) + geom_line() +
xlab("time") + ylab("temperature(degree C)")
?neuralnet
# write.csv(x = data, file = paste0(start," to ", end,".csv"))
#--------------------
#訓練模型
library(neuralnet)
bpn <- neuralnet(formula = rain~., data = tp_data, hidden = c(2,4),learningrate = 0.01,linear.output = F)
View(tp_data)
bpn <- neuralnet(formula = 'rain~.', data = tp_data, hidden = c(2,4),learningrate = 0.01,linear.output = F)
f1 <- as.formula('rain~T+1/pressure')
bpn <- neuralnet(formula = f1, data = tp_data, hidden = c(2,4),learningrate = 0.01,linear.output = F)
f1 <- as.formula('rain~T/pressure')
bpn <- neuralnet(formula = f1, data = tp_data, hidden = c(2,4),learningrate = 0.01,linear.output = F)
print(bpn)
#圖解BP
plot(bpn)
View(bpn)
View(tp_data)
bpn[["data"]][["rain"]][1:10]
bpn[["net.result"]][[1]]
#載入套件
library(neuralnet)
#整理資料
data <- iris
data$setosa <- ifelse(data$Species == "setosa", 1, 0)
data$versicolor <- ifelse(data$Species == "versicolor", 1, 0)
data$virginica <- ifelse(data$Species == "virginica", 1, 0)
# Conditional Element Selection
# ifelse(test, yes, no)
# ifelse returns a value with the same shape as test which is filled with elements selected from either yes or no
# depending on whether the element of test is TRUE or FALSE.
#訓練模型
f1 <- as.formula('setosa + versicolor + virginica  ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01,linear.output = F)
print(bpn)
#圖解BP
plot(bpn)
library(neuralnet)
f1 <- as.formula('rain~T/pressure')
bpn <- neuralnet(formula = f1, data = tp_data, hidden = c(2,4),learningrate = 0.01,linear.output = F)
print(bpn)
#圖解BP
plot(bpn)
# visualization
library(ggplot2)
ggplot(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,5])) + geom_line() +
xlab("time") + ylab("temperature(degree C)")
ggplot(data = t_data, aes(x = 1:nrow(t_data), y = t_data[,1])) + geom_line() +
xlab("time") + ylab("rain(mm)")
tp_mean <- apply(X = tp_data, MARGIN = 2, FUN = mean)
tp_sd <- apply(X = tp_data, MARGIN = 2, FUN = sd)
tpn_data <- scale(x = tp_data, center = tp_mean, scale = tp_sd)
tpn_data <- data.frame(tpn_data)
ggplot(data = tpn_data, aes(x = 1:nrow(tpn_data), y = tpn_data[,1])) + geom_line() +
xlab("time") + ylab("rain(mm)")
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,1])) + geom_line() +
xlab("time") + ylab("rain(mm)")
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,6])) + geom_line() +
xlab("time") + ylab("temperature(degree C)")
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,5])) + geom_line() +
xlab("time") + ylab("temperature(degree C)")
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,6])) + geom_line() +
xlab("time") + ylab("temperature(degree C)")
ggplot(data = tpn_data, aes(x = 1:nrow(tpn_data), y = tpn_data[,1])) + geom_line() +
xlab("time") + ylab("rain(mm)") +
geom_line(data = tpn_data, aes(x = 1:nrow(tpn_data), y = tpn_data[,5]))
ggplot(data = tpn_data, aes(x = 1:nrow(tpn_data), y = tpn_data[,1])) + geom_line() +
xlab("time") + ylab("rain(mm)") +
geom_line(data = tpn_data, aes(x = 1:nrow(tpn_data), y = tpn_data[,5]), color = "blue")
?geom_ma
libary(ggplot2)
library(ggplot2)
?geom_ma
??geom_ma
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,6])) + geom_line() +
xlab("time") + ylab("temperature(degree C)")
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,6])) + geom_line() +
xlab("time") + ylab("temperature(degree C)") +
geom_ma(ma_fun = SMA, n = 12, size = 1)
library(TTR)
ggplot(data = tp_data, aes(x = 1:nrow(tp_data), y = tp_data[,6])) + geom_line() +
xlab("time") + ylab("temperature(degree C)") +
geom_ma(ma_fun = SMA, n = 12, size = 1)
?ts
ts(tp_data[1])
ts(tp_data[1,])
ts(tp_data[,1])
x = ts(tp_data[,1])
x
mode(x)
class(x)
#--------ML 3-------------
#nnfor package
install.packages("nnfor")
#--------ML 3-------------
#nnfor package
library(nnfor)
x = ts(tp_data[,1])
x
View(x)
elm(ts)
model <- elm(x)
?forecast.elm
View(model)
predict <- forecast.elm(model)
predict <- nnfor::forecast.elm(model)
predict <- nnfor:: forecast.elm(model)
predict <- nnfor: forecast.elm(model)
predict <- forecast.elm(model)
predict <- nnfor::forecast.elm(model)
predict <- forecast.elm(model)
forecast.elm
#--------ML 3-------------
#nnfor package
library(nnfor)
predict <- forecast.elm(model)
nnfor::forecast.elm
?mean
base::mean
mean
nnfor
elm
elm
